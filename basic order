基本操作
这里只简单罗列几条命令，具体操作在下面通过Git创建本地仓库会介绍到。

git init：初始化仓库
git status：查看仓库状态
git add：向暂存区中添加文件
git commit：保存仓库的历史记录
git log：查看提交日志
git diff：查看更改前后的差别
git branch：显示分支一览表
git checkout -b：创建并切换分支
git checkout：切换分支
git merge：合并分支
git reset：回溯历史版本
git remote add：添加远程仓库
git push：推送至远程仓库
git clone：获取远程仓库
分支
在进行多个并行作业时，我们会用到分支。

master分支是Git默认创建的分支，它就像河流的主干，而我们根据需要，创建的一个个分支，就相当于河流分化出来的一个个小分流。

我们在分支上进行编程作业（例如，每个负责项目的一个模块开发），当完成之后，进行审核无误，再合并到主分支master上，这样就能合理高效地实现多人并行开发。

特性分支
特性分支，是集中实现单一特性（主题），除此之外不进行任何作业的分支。

在日常开发过程中，我们常常会创建数个特性分支，同时在保留一个随时可以发布软件的稳定分支。稳定分支的角色通常由master担当。

假设我们创建了一个feature-a分支，这一分支主要实现feature-a，除feature-a的实现之外不进行任何作业。即便在开发过程中发现了Bug，也需要再创建新的分支，在新分支中进行修正。

创建——初始化仓库
要使用Git进行版本管理，必须先初始化仓库。

建立一个目录，并初始化仓库。



如果初始化成功，执行了git init命令的目录下就会生成.git目录。这个.git目录里存着管理当前目录内容所需的仓库数据。我们将这个目录的内容成为“附属于该仓库的工作树”。

查看仓库状态。


工作树和仓库在被操作过程中，状态会不断变化，所以需要经常用gti status查看当前状态。

提交——版本更新
编辑完代码后，一个完整的提交流程应该是：git status ->  git add -> git commit。

git status——查看仓库状态：

Untracked files表示修改过的文件尚未追踪，即尚未成为仓库的管理对象（加入到工作树中）。

git add——加入暂存区：暂存区是提交之前的一个临时区域。git add将其加入暂存区，为保存到工作树中做准备。

此时再运行git status，提示“Change to be committed”，说明是提交状态。

git commit——保存仓库的历史记录：将刚刚的提交状态保存，这样就算完成了一个版本控制。

-m 参数后的字符串称作提交信息，是对这个提交的描述。

查看——仓库状态
git log——查看提交日志：查看以往仓库中提交的日志，什么人在什么时候进行了提交或合并，以及操作前后有怎样的差别。



git diff——查看更改前后的差别：查看工作树、暂存区、最新提交之间的差别。

查看工作树和暂存区的区别：在test.html中写点东西，先不用git add,直接运行git diff查看，此时显示的是工作树与最新提交状态之间的差别。

查看工作树与最新提交的差别：先执行git add将修改提交到暂存区；如果此时执行git diff,会发现没有任何显示，这是因为执行了git add后工作树和暂存区的状态并无差别。要查看与最新提交的差别，要执行git diff HEAD。
远程仓库
准备
创建账户：如果你还没有Github账户，那么你需要先创建一个账户。
登录后，即可使用Github的功能，创建仓库。

设置SSH Key：Github上仓库与本地仓库连接，是通过使用了SSH的公开秘钥认证方式进行的。所以，得现在本地生成SSH Key，然后设置到Github上，才能实现仓库的远程连接。

打开Git Bash，创建SSH Key。
运行命令：ssh-keygen -t rsa -C "your_email@example.com"

输入密码后，会出现以下结果，表明创建成功：



id_rsa是私有密钥，id_rsa.pub是公开密钥。

在Github中添加公开密钥。



创建——建立远程仓库
创建：


仓库配置：


如果想向Github添加手中已有的Git仓库，建议不要勾选Initialize this repository with a README选项；
Add.gitignore：可以在初始化时生成.gitignore文件，这个设定会帮我们把不需要在Git仓库中进行版本管理的文件记录在.gitignore文件中，省去了每次根据框架进行设置的麻烦。若不使用任何框架，则可不选择。
Add a license：选择要添加的许可协议文件，一般可不选。
创建成功：


克隆——获取远程仓库
当你是先在Github上创建好项目仓库时，此时需要把远程仓库克隆到本地，创建一个本地仓库。

复制HTTPS链接：

打开Git Bash，进入要作为仓库的文件目录：



运行命令：git clone https://github.com/Monkey626/test.git

克隆成功：


进入仓库：查看当前仓库分支信息。



执行git clone命令后，我们会默认处于master分支下，同时系统会自动将origin设置成该远程仓库的标识符（即origin代表了该远程仓库）。

同步——更新代码（从本地仓库传到远程仓库）
当在本地完成好编程作业时，此时需要将代码同步到远程仓库，以实现托管。

添加远程仓库：你需要将远程仓库与本地仓库连接起来，我们用git remote add命令来设置本地仓库的远程仓库。

推送至远程仓库：如果想将当前本地仓库分支下的内容推送给远程仓库，要用git push命令。假定我们在master分支（如果是其他分支，最后的参数就改为其它分支对应名称）下操作


同步——更新代码（从远程仓库拉到本地仓库）
当你的队友将完成了编程作业，将其代码推送到远程仓库后，此时，你可能需要将代远程仓库队友更新后的代码拉到本地，这时要用到git pull命令。

运行命令行git pull：

拉取成功：

Github几大功能
Issue
在软件开发过程中，开发者们为了跟踪BUG及进行软件相关讨论，进而方便管理，创建了Issue。

在Github上，可以将它作为开发者之间的交流工具，多多加以利用。

Issue可以在以下情况使用：

发现软件的Bug并报告；
有事想向作者询问、探讨；
事先列出今后准备实施的任务。
Issue支持markdown语法，也支持添加标签便于管理。

在Issue里可以添加图片，可以使用表情。

Pull Request
Pull Request是用户修改代码后向对方仓库发送采纳请求的功能，也是Github的核心功能。

Pull Request的流程：

Fork：将你要修改代码的项目仓库Fork到自己的Github账号上，创建一个属于你的仓库；





Clone：将其clone到本地



Branch：在本地仓库创建一个特性分支（有了更明确的主题，也便于对方了解自己修改代码的意图），用于本次代码修改。



Commit：提交修改


Push：要从Github发送Pull Ruquest，Github端的仓库必须有一个包含了修改后代码的分支。所以，要创建本地特性分支的相应远程分支。



Send：发送Pull Request。





这样，就是一个完整的发送Pull Request流程。
